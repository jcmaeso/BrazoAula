
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d44  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000cc  2000000c  08002f68  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000d8  08002f68  000200d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009831  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001450  00000000  00000000  0002986b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000998  00000000  00000000  0002acc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f0  00000000  00000000  0002b658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003dc3  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003681  00000000  00000000  0002fd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003338c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002814  00000000  00000000  00033408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002f24 	.word	0x08002f24

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002f24 	.word	0x08002f24

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f927 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f002 fb46 	bl	8002be8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f941 	bl	800080a <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f909 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000028 	.word	0x20000028

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <__NVIC_SetPriorityGrouping+0x40>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	4313      	orrs	r3, r2
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x40>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00
 8000648:	05fa0000 	.word	0x05fa0000

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	4909      	ldr	r1, [pc, #36]	; (80006a0 <__NVIC_EnableIRQ+0x38>)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	095b      	lsrs	r3, r3, #5
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	f002 021f 	and.w	r2, r2, #31
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	490d      	ldr	r1, [pc, #52]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	4909      	ldr	r1, [pc, #36]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	2201      	movs	r2, #1
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	401a      	ands	r2, r3
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073e:	2101      	movs	r1, #1
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	1e59      	subs	r1, r3, #1
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff90 	bl	80006a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff2b 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff40 	bl	800064c <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff90 	bl	80006f8 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5f 	bl	80006a4 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff33 	bl	8000668 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
 8000842:	e175      	b.n	8000b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000844:	2201      	movs	r2, #1
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	429a      	cmp	r2, r3
 800085e:	f040 8164 	bne.w	8000b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d003      	beq.n	8000872 <HAL_GPIO_Init+0x4e>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b12      	cmp	r3, #18
 8000870:	d123      	bne.n	80008ba <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	08da      	lsrs	r2, r3, #3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3208      	adds	r2, #8
 800087a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	220f      	movs	r2, #15
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	691a      	ldr	r2, [r3, #16]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	08da      	lsrs	r2, r3, #3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3208      	adds	r2, #8
 80008b4:	69b9      	ldr	r1, [r7, #24]
 80008b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4013      	ands	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f003 0203 	and.w	r2, r3, #3
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d00b      	beq.n	800090e <HAL_GPIO_Init+0xea>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d007      	beq.n	800090e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000902:	2b11      	cmp	r3, #17
 8000904:	d003      	beq.n	800090e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b12      	cmp	r3, #18
 800090c:	d130      	bne.n	8000970 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	2203      	movs	r2, #3
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4013      	ands	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4313      	orrs	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000944:	2201      	movs	r2, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	f003 0201 	and.w	r2, r3, #1
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80be 	beq.w	8000b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4a65      	ldr	r2, [pc, #404]	; (8000b44 <HAL_GPIO_Init+0x320>)
 80009b0:	4b64      	ldr	r3, [pc, #400]	; (8000b44 <HAL_GPIO_Init+0x320>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <HAL_GPIO_Init+0x320>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009c6:	4a60      	ldr	r2, [pc, #384]	; (8000b48 <HAL_GPIO_Init+0x324>)
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a57      	ldr	r2, [pc, #348]	; (8000b4c <HAL_GPIO_Init+0x328>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d037      	beq.n	8000a62 <HAL_GPIO_Init+0x23e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a56      	ldr	r2, [pc, #344]	; (8000b50 <HAL_GPIO_Init+0x32c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d031      	beq.n	8000a5e <HAL_GPIO_Init+0x23a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a55      	ldr	r2, [pc, #340]	; (8000b54 <HAL_GPIO_Init+0x330>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d02b      	beq.n	8000a5a <HAL_GPIO_Init+0x236>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a54      	ldr	r2, [pc, #336]	; (8000b58 <HAL_GPIO_Init+0x334>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d025      	beq.n	8000a56 <HAL_GPIO_Init+0x232>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a53      	ldr	r2, [pc, #332]	; (8000b5c <HAL_GPIO_Init+0x338>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d01f      	beq.n	8000a52 <HAL_GPIO_Init+0x22e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a52      	ldr	r2, [pc, #328]	; (8000b60 <HAL_GPIO_Init+0x33c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d019      	beq.n	8000a4e <HAL_GPIO_Init+0x22a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <HAL_GPIO_Init+0x340>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <HAL_GPIO_Init+0x226>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a50      	ldr	r2, [pc, #320]	; (8000b68 <HAL_GPIO_Init+0x344>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d00d      	beq.n	8000a46 <HAL_GPIO_Init+0x222>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4f      	ldr	r2, [pc, #316]	; (8000b6c <HAL_GPIO_Init+0x348>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d007      	beq.n	8000a42 <HAL_GPIO_Init+0x21e>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4e      	ldr	r2, [pc, #312]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_GPIO_Init+0x21a>
 8000a3a:	2309      	movs	r3, #9
 8000a3c:	e012      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a3e:	230a      	movs	r3, #10
 8000a40:	e010      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a42:	2308      	movs	r3, #8
 8000a44:	e00e      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a46:	2307      	movs	r3, #7
 8000a48:	e00c      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	e00a      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a4e:	2305      	movs	r3, #5
 8000a50:	e008      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a52:	2304      	movs	r3, #4
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e004      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e002      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <HAL_GPIO_Init+0x240>
 8000a62:	2300      	movs	r3, #0
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	f002 0203 	and.w	r2, r2, #3
 8000a6a:	0092      	lsls	r2, r2, #2
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a74:	4934      	ldr	r1, [pc, #208]	; (8000b48 <HAL_GPIO_Init+0x324>)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aac:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ad0:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000afa:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	2b0f      	cmp	r3, #15
 8000b34:	f67f ae86 	bls.w	8000844 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3724      	adds	r7, #36	; 0x24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020400 	.word	0x40020400
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40021400 	.word	0x40021400
 8000b64:	40021800 	.word	0x40021800
 8000b68:	40021c00 	.word	0x40021c00
 8000b6c:	40022000 	.word	0x40022000
 8000b70:	40022400 	.word	0x40022400
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e25e      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8087 	beq.w	8000caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b9c:	4b96      	ldr	r3, [pc, #600]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d00c      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ba8:	4b93      	ldr	r3, [pc, #588]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d112      	bne.n	8000bda <HAL_RCC_OscConfig+0x62>
 8000bb4:	4b90      	ldr	r3, [pc, #576]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bc0:	d10b      	bne.n	8000bda <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc2:	4b8d      	ldr	r3, [pc, #564]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d06c      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x130>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d168      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e238      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be2:	d106      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x7a>
 8000be4:	4a84      	ldr	r2, [pc, #528]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000be6:	4b84      	ldr	r3, [pc, #528]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e02e      	b.n	8000c50 <HAL_RCC_OscConfig+0xd8>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10c      	bne.n	8000c14 <HAL_RCC_OscConfig+0x9c>
 8000bfa:	4a7f      	ldr	r2, [pc, #508]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000bfc:	4b7e      	ldr	r3, [pc, #504]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4a7c      	ldr	r2, [pc, #496]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c08:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e01d      	b.n	8000c50 <HAL_RCC_OscConfig+0xd8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0xc0>
 8000c1e:	4a76      	ldr	r2, [pc, #472]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c20:	4b75      	ldr	r3, [pc, #468]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4a73      	ldr	r2, [pc, #460]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c2c:	4b72      	ldr	r3, [pc, #456]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e00b      	b.n	8000c50 <HAL_RCC_OscConfig+0xd8>
 8000c38:	4a6f      	ldr	r2, [pc, #444]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c3a:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4a6c      	ldr	r2, [pc, #432]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c46:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d013      	beq.n	8000c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c58:	f7ff fcc8 	bl	80005ec <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fcc4 	bl	80005ec <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e1ec      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	4b61      	ldr	r3, [pc, #388]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f0      	beq.n	8000c60 <HAL_RCC_OscConfig+0xe8>
 8000c7e:	e014      	b.n	8000caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c80:	f7ff fcb4 	bl	80005ec <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fcb0 	bl	80005ec <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b64      	cmp	r3, #100	; 0x64
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e1d8      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	4b57      	ldr	r3, [pc, #348]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f0      	bne.n	8000c88 <HAL_RCC_OscConfig+0x110>
 8000ca6:	e000      	b.n	8000caa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d069      	beq.n	8000d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cb6:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00b      	beq.n	8000cda <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cc2:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d11c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x190>
 8000cce:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d116      	bne.n	8000d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x17a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d001      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e1ac      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf2:	4941      	ldr	r1, [pc, #260]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000cf4:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	e040      	b.n	8000d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d023      	beq.n	8000d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d10:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc66 	bl	80005ec <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc62 	bl	80005ec <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e18a      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d42:	492d      	ldr	r1, [pc, #180]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
 8000d56:	e018      	b.n	8000d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d58:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d64:	f7ff fc42 	bl	80005ec <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fc3e 	bl	80005ec <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e166      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d038      	beq.n	8000e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d019      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9e:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000daa:	f7ff fc1f 	bl	80005ec <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db2:	f7ff fc1b 	bl	80005ec <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e143      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f0      	beq.n	8000db2 <HAL_RCC_OscConfig+0x23a>
 8000dd0:	e01a      	b.n	8000e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_RCC_OscConfig+0x280>)
 8000dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dde:	f7ff fc05 	bl	80005ec <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	e00a      	b.n	8000dfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de6:	f7ff fc01 	bl	80005ec <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d903      	bls.n	8000dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e129      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
 8000df8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	4b95      	ldr	r3, [pc, #596]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1ee      	bne.n	8000de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80a4 	beq.w	8000f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e16:	4b8f      	ldr	r3, [pc, #572]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10d      	bne.n	8000e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4a8c      	ldr	r2, [pc, #560]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e24:	4b8b      	ldr	r3, [pc, #556]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b89      	ldr	r3, [pc, #548]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e3e:	4b86      	ldr	r3, [pc, #536]	; (8001058 <HAL_RCC_OscConfig+0x4e0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d118      	bne.n	8000e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000e4a:	4a83      	ldr	r2, [pc, #524]	; (8001058 <HAL_RCC_OscConfig+0x4e0>)
 8000e4c:	4b82      	ldr	r3, [pc, #520]	; (8001058 <HAL_RCC_OscConfig+0x4e0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e56:	f7ff fbc9 	bl	80005ec <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e5e:	f7ff fbc5 	bl	80005ec <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b64      	cmp	r3, #100	; 0x64
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e0ed      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e70:	4b79      	ldr	r3, [pc, #484]	; (8001058 <HAL_RCC_OscConfig+0x4e0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f0      	beq.n	8000e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x31a>
 8000e84:	4a73      	ldr	r2, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e86:	4b73      	ldr	r3, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e90:	e02d      	b.n	8000eee <HAL_RCC_OscConfig+0x376>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x33c>
 8000e9a:	4a6e      	ldr	r2, [pc, #440]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e9c:	4b6d      	ldr	r3, [pc, #436]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea6:	4a6b      	ldr	r2, [pc, #428]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000ea8:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb2:	e01c      	b.n	8000eee <HAL_RCC_OscConfig+0x376>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d10c      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x35e>
 8000ebc:	4a65      	ldr	r2, [pc, #404]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec8:	4a62      	ldr	r2, [pc, #392]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000eca:	4b62      	ldr	r3, [pc, #392]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed4:	e00b      	b.n	8000eee <HAL_RCC_OscConfig+0x376>
 8000ed6:	4a5f      	ldr	r2, [pc, #380]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee2:	4a5c      	ldr	r2, [pc, #368]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d015      	beq.n	8000f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fb79 	bl	80005ec <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb75 	bl	80005ec <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e09b      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	4b4f      	ldr	r3, [pc, #316]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0ee      	beq.n	8000efe <HAL_RCC_OscConfig+0x386>
 8000f20:	e014      	b.n	8000f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f22:	f7ff fb63 	bl	80005ec <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f28:	e00a      	b.n	8000f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fb5f 	bl	80005ec <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e085      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	4b44      	ldr	r3, [pc, #272]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1ee      	bne.n	8000f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d105      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d071      	beq.n	800104a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f66:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d069      	beq.n	8001046 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d14b      	bne.n	8001012 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f7a:	4a36      	ldr	r2, [pc, #216]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb31 	bl	80005ec <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fb2d 	bl	80005ec <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e055      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fac:	4929      	ldr	r1, [pc, #164]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69da      	ldr	r2, [r3, #28]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	085b      	lsrs	r3, r3, #1
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	041b      	lsls	r3, r3, #16
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	061b      	lsls	r3, r3, #24
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	071b      	lsls	r3, r3, #28
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fde:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff faff 	bl	80005ec <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fafb 	bl	80005ec <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e023      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x47a>
 8001010:	e01b      	b.n	800104a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800101c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101e:	f7ff fae5 	bl	80005ec <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff fae1 	bl	80005ec <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e009      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <HAL_RCC_OscConfig+0x4ae>
 8001044:	e001      	b.n	800104a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0ce      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 020f 	and.w	r2, r3, #15
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d210      	bcs.n	80010a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	4966      	ldr	r1, [pc, #408]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	4b65      	ldr	r3, [pc, #404]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 020f 	bic.w	r2, r3, #15
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	4313      	orrs	r3, r2
 8001090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	4b62      	ldr	r3, [pc, #392]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 020f 	and.w	r2, r3, #15
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0b6      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010bc:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	4b58      	ldr	r3, [pc, #352]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	4b52      	ldr	r3, [pc, #328]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e0:	494f      	ldr	r1, [pc, #316]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d040      	beq.n	8001180 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b46      	ldr	r3, [pc, #280]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d115      	bne.n	800113e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e07d      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111e:	4b40      	ldr	r3, [pc, #256]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e071      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e069      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	4938      	ldr	r1, [pc, #224]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f023 0203 	bic.w	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001150:	f7ff fa4c 	bl	80005ec <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	e00a      	b.n	800116e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001158:	f7ff fa48 	bl	80005ec <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f241 3288 	movw	r2, #5000	; 0x1388
 8001166:	4293      	cmp	r3, r2
 8001168:	d901      	bls.n	800116e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e051      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 020c 	and.w	r2, r3, #12
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	429a      	cmp	r2, r3
 800117e:	d1eb      	bne.n	8001158 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 020f 	and.w	r2, r3, #15
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d910      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4923      	ldr	r1, [pc, #140]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 020f 	bic.w	r2, r3, #15
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 020f 	and.w	r2, r3, #15
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e030      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011bc:	4918      	ldr	r1, [pc, #96]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011da:	4911      	ldr	r1, [pc, #68]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ee:	f000 f81d 	bl	800122c <HAL_RCC_GetSysClockFreq>
 80011f2:	4601      	mov	r1, r0
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1c8>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	fa21 f303 	lsr.w	r3, r1, r3
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_RCC_ClockConfig+0x1cc>)
 8001208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff f9aa 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00
 8001220:	40023800 	.word	0x40023800
 8001224:	08002f3c 	.word	0x08002f3c
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001230:	b087      	sub	sp, #28
 8001232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001234:	2200      	movs	r2, #0
 8001236:	60fa      	str	r2, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	617a      	str	r2, [r7, #20]
 800123c:	2200      	movs	r2, #0
 800123e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8001240:	2200      	movs	r2, #0
 8001242:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_RCC_GetSysClockFreq+0x160>)
 8001246:	6892      	ldr	r2, [r2, #8]
 8001248:	f002 020c 	and.w	r2, r2, #12
 800124c:	2a04      	cmp	r2, #4
 800124e:	d007      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x34>
 8001250:	2a08      	cmp	r2, #8
 8001252:	d008      	beq.n	8001266 <HAL_RCC_GetSysClockFreq+0x3a>
 8001254:	2a00      	cmp	r2, #0
 8001256:	f040 8090 	bne.w	800137a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800125a:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_RCC_GetSysClockFreq+0x164>)
 800125c:	613b      	str	r3, [r7, #16]
       break;
 800125e:	e08f      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001260:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <HAL_RCC_GetSysClockFreq+0x168>)
 8001262:	613b      	str	r3, [r7, #16]
      break;
 8001264:	e08c      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001266:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_RCC_GetSysClockFreq+0x160>)
 8001268:	6852      	ldr	r2, [r2, #4]
 800126a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800126e:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001270:	4a46      	ldr	r2, [pc, #280]	; (800138c <HAL_RCC_GetSysClockFreq+0x160>)
 8001272:	6852      	ldr	r2, [r2, #4]
 8001274:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001278:	2a00      	cmp	r2, #0
 800127a:	d023      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800127c:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_RCC_GetSysClockFreq+0x160>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	f04f 0400 	mov.w	r4, #0
 8001286:	f240 11ff 	movw	r1, #511	; 0x1ff
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	ea03 0301 	and.w	r3, r3, r1
 8001292:	ea04 0402 	and.w	r4, r4, r2
 8001296:	4a3f      	ldr	r2, [pc, #252]	; (8001394 <HAL_RCC_GetSysClockFreq+0x168>)
 8001298:	fb02 f104 	mul.w	r1, r2, r4
 800129c:	2200      	movs	r2, #0
 800129e:	fb02 f203 	mul.w	r2, r2, r3
 80012a2:	440a      	add	r2, r1
 80012a4:	493b      	ldr	r1, [pc, #236]	; (8001394 <HAL_RCC_GetSysClockFreq+0x168>)
 80012a6:	fba3 0101 	umull	r0, r1, r3, r1
 80012aa:	1853      	adds	r3, r2, r1
 80012ac:	4619      	mov	r1, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f04f 0400 	mov.w	r4, #0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	f7fe ffbe 	bl	8000238 <__aeabi_uldivmod>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e04c      	b.n	800135e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c4:	4a31      	ldr	r2, [pc, #196]	; (800138c <HAL_RCC_GetSysClockFreq+0x160>)
 80012c6:	6852      	ldr	r2, [r2, #4]
 80012c8:	0992      	lsrs	r2, r2, #6
 80012ca:	4611      	mov	r1, r2
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f240 15ff 	movw	r5, #511	; 0x1ff
 80012d4:	f04f 0600 	mov.w	r6, #0
 80012d8:	ea05 0501 	and.w	r5, r5, r1
 80012dc:	ea06 0602 	and.w	r6, r6, r2
 80012e0:	4629      	mov	r1, r5
 80012e2:	4632      	mov	r2, r6
 80012e4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80012e8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80012ec:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80012f0:	4651      	mov	r1, sl
 80012f2:	465a      	mov	r2, fp
 80012f4:	46aa      	mov	sl, r5
 80012f6:	46b3      	mov	fp, r6
 80012f8:	4655      	mov	r5, sl
 80012fa:	465e      	mov	r6, fp
 80012fc:	1b4d      	subs	r5, r1, r5
 80012fe:	eb62 0606 	sbc.w	r6, r2, r6
 8001302:	4629      	mov	r1, r5
 8001304:	4632      	mov	r2, r6
 8001306:	0194      	lsls	r4, r2, #6
 8001308:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800130c:	018b      	lsls	r3, r1, #6
 800130e:	1a5b      	subs	r3, r3, r1
 8001310:	eb64 0402 	sbc.w	r4, r4, r2
 8001314:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001318:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800131c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001320:	4643      	mov	r3, r8
 8001322:	464c      	mov	r4, r9
 8001324:	4655      	mov	r5, sl
 8001326:	465e      	mov	r6, fp
 8001328:	18ed      	adds	r5, r5, r3
 800132a:	eb46 0604 	adc.w	r6, r6, r4
 800132e:	462b      	mov	r3, r5
 8001330:	4634      	mov	r4, r6
 8001332:	02a2      	lsls	r2, r4, #10
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001346:	4618      	mov	r0, r3
 8001348:	4621      	mov	r1, r4
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f04f 0400 	mov.w	r4, #0
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	f7fe ff70 	bl	8000238 <__aeabi_uldivmod>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_GetSysClockFreq+0x160>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0c1b      	lsrs	r3, r3, #16
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	3301      	adds	r3, #1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	613b      	str	r3, [r7, #16]
      break;
 8001378:	e002      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetSysClockFreq+0x164>)
 800137c:	613b      	str	r3, [r7, #16]
      break;
 800137e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001380:	693b      	ldr	r3, [r7, #16]
}
 8001382:	4618      	mov	r0, r3
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	00f42400 	.word	0x00f42400
 8001394:	017d7840 	.word	0x017d7840

08001398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e01d      	b.n	80013e6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f001 fc8a 	bl	8002cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3304      	adds	r3, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4610      	mov	r0, r2
 80013d8:	f000 fc28 	bl	8001c2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f001 f83a 	bl	800247c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_TIM_PWM_Start+0x7c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d004      	beq.n	800141c <HAL_TIM_PWM_Start+0x2c>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_TIM_PWM_Start+0x80>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_TIM_PWM_Start+0x30>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_TIM_PWM_Start+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_TIM_PWM_Start+0x84>)
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b06      	cmp	r3, #6
 8001446:	d00b      	beq.n	8001460 <HAL_TIM_PWM_Start+0x70>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d007      	beq.n	8001460 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00010007 	.word	0x00010007

08001478 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e01d      	b.n	80014c6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f001 fbc6 	bl	8002c30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3304      	adds	r3, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f000 fbb8 	bl	8001c2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d841      	bhi.n	8001564 <HAL_TIM_IC_Start_IT+0x94>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <HAL_TIM_IC_Start_IT+0x18>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	0800151d 	.word	0x0800151d
 80014ec:	08001565 	.word	0x08001565
 80014f0:	08001565 	.word	0x08001565
 80014f4:	08001565 	.word	0x08001565
 80014f8:	0800152f 	.word	0x0800152f
 80014fc:	08001565 	.word	0x08001565
 8001500:	08001565 	.word	0x08001565
 8001504:	08001565 	.word	0x08001565
 8001508:	08001541 	.word	0x08001541
 800150c:	08001565 	.word	0x08001565
 8001510:	08001565 	.word	0x08001565
 8001514:	08001565 	.word	0x08001565
 8001518:	08001553 	.word	0x08001553
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	68d2      	ldr	r2, [r2, #12]
 8001526:	f042 0202 	orr.w	r2, r2, #2
 800152a:	60da      	str	r2, [r3, #12]
      break;
 800152c:	e01b      	b.n	8001566 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	68d2      	ldr	r2, [r2, #12]
 8001538:	f042 0204 	orr.w	r2, r2, #4
 800153c:	60da      	str	r2, [r3, #12]
      break;
 800153e:	e012      	b.n	8001566 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	68d2      	ldr	r2, [r2, #12]
 800154a:	f042 0208 	orr.w	r2, r2, #8
 800154e:	60da      	str	r2, [r3, #12]
      break;
 8001550:	e009      	b.n	8001566 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	68d2      	ldr	r2, [r2, #12]
 800155c:	f042 0210 	orr.w	r2, r2, #16
 8001560:	60da      	str	r2, [r3, #12]
      break;
 8001562:	e000      	b.n	8001566 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8001564:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 ff84 	bl	800247c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_TIM_IC_Start_IT+0xd8>)
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d00b      	beq.n	800159e <HAL_TIM_IC_Start_IT+0xce>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d007      	beq.n	800159e <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	00010007 	.word	0x00010007

080015ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d122      	bne.n	8001608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d11b      	bne.n	8001608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0202 	mvn.w	r2, #2
 80015d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f001 fae4 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80015f4:	e005      	b.n	8001602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fafa 	bl	8001bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb01 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b04      	cmp	r3, #4
 8001614:	d122      	bne.n	800165c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b04      	cmp	r3, #4
 8001622:	d11b      	bne.n	800165c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0204 	mvn.w	r2, #4
 800162c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2202      	movs	r2, #2
 8001632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f001 faba 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 8001648:	e005      	b.n	8001656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fad0 	bl	8001bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fad7 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b08      	cmp	r3, #8
 8001668:	d122      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b08      	cmp	r3, #8
 8001676:	d11b      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0208 	mvn.w	r2, #8
 8001680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2204      	movs	r2, #4
 8001686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f001 fa90 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 800169c:	e005      	b.n	80016aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 faa6 	bl	8001bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 faad 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d122      	bne.n	8001704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d11b      	bne.n	8001704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0210 	mvn.w	r2, #16
 80016d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2208      	movs	r2, #8
 80016da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f001 fa66 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80016f0:	e005      	b.n	80016fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fa7c 	bl	8001bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fa83 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10e      	bne.n	8001730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0201 	mvn.w	r2, #1
 8001728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fa56 	bl	8001bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b80      	cmp	r3, #128	; 0x80
 800173c:	d10e      	bne.n	800175c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001748:	2b80      	cmp	r3, #128	; 0x80
 800174a:	d107      	bne.n	800175c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 ff9a 	bl	8002690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800176a:	d10e      	bne.n	800178a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d107      	bne.n	800178a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 ff8d 	bl	80026a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001794:	2b40      	cmp	r3, #64	; 0x40
 8001796:	d10e      	bne.n	80017b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	2b40      	cmp	r3, #64	; 0x40
 80017a4:	d107      	bne.n	80017b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fa31 	bl	8001c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	d10e      	bne.n	80017e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d107      	bne.n	80017e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f06f 0220 	mvn.w	r2, #32
 80017da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 ff4d 	bl	800267c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001800:	2302      	movs	r3, #2
 8001802:	e08a      	b.n	800191a <HAL_TIM_IC_ConfigChannel+0x130>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11b      	bne.n	8001852 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f000 fcfd 	bl	8002228 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	6992      	ldr	r2, [r2, #24]
 8001838:	f022 020c 	bic.w	r2, r2, #12
 800183c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	6991      	ldr	r1, [r2, #24]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	6892      	ldr	r2, [r2, #8]
 800184c:	430a      	orrs	r2, r1
 800184e:	619a      	str	r2, [r3, #24]
 8001850:	e05a      	b.n	8001908 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11c      	bne.n	8001892 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f000 fd52 	bl	8002310 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	6992      	ldr	r2, [r2, #24]
 8001876:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800187a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	6991      	ldr	r1, [r2, #24]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	6892      	ldr	r2, [r2, #8]
 800188a:	0212      	lsls	r2, r2, #8
 800188c:	430a      	orrs	r2, r1
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	e03a      	b.n	8001908 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d11b      	bne.n	80018d0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f000 fd6f 	bl	800238a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	69d2      	ldr	r2, [r2, #28]
 80018b6:	f022 020c 	bic.w	r2, r2, #12
 80018ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	69d1      	ldr	r1, [r2, #28]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	6892      	ldr	r2, [r2, #8]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	61da      	str	r2, [r3, #28]
 80018ce:	e01b      	b.n	8001908 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f000 fd8f 	bl	8002402 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	69d2      	ldr	r2, [r2, #28]
 80018ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	69d1      	ldr	r1, [r2, #28]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	6892      	ldr	r2, [r2, #8]
 8001902:	0212      	lsls	r2, r2, #8
 8001904:	430a      	orrs	r2, r1
 8001906:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800193a:	2302      	movs	r3, #2
 800193c:	e105      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x226>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b14      	cmp	r3, #20
 8001952:	f200 80f0 	bhi.w	8001b36 <HAL_TIM_PWM_ConfigChannel+0x212>
 8001956:	a201      	add	r2, pc, #4	; (adr r2, 800195c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	080019b1 	.word	0x080019b1
 8001960:	08001b37 	.word	0x08001b37
 8001964:	08001b37 	.word	0x08001b37
 8001968:	08001b37 	.word	0x08001b37
 800196c:	080019f1 	.word	0x080019f1
 8001970:	08001b37 	.word	0x08001b37
 8001974:	08001b37 	.word	0x08001b37
 8001978:	08001b37 	.word	0x08001b37
 800197c:	08001a33 	.word	0x08001a33
 8001980:	08001b37 	.word	0x08001b37
 8001984:	08001b37 	.word	0x08001b37
 8001988:	08001b37 	.word	0x08001b37
 800198c:	08001a73 	.word	0x08001a73
 8001990:	08001b37 	.word	0x08001b37
 8001994:	08001b37 	.word	0x08001b37
 8001998:	08001b37 	.word	0x08001b37
 800199c:	08001ab5 	.word	0x08001ab5
 80019a0:	08001b37 	.word	0x08001b37
 80019a4:	08001b37 	.word	0x08001b37
 80019a8:	08001b37 	.word	0x08001b37
 80019ac:	08001af5 	.word	0x08001af5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f9d8 	bl	8001d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	6992      	ldr	r2, [r2, #24]
 80019c6:	f042 0208 	orr.w	r2, r2, #8
 80019ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	6992      	ldr	r2, [r2, #24]
 80019d6:	f022 0204 	bic.w	r2, r2, #4
 80019da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6991      	ldr	r1, [r2, #24]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	6912      	ldr	r2, [r2, #16]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	619a      	str	r2, [r3, #24]
      break;
 80019ee:	e0a3      	b.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fa2a 	bl	8001e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	6992      	ldr	r2, [r2, #24]
 8001a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	6992      	ldr	r2, [r2, #24]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	6991      	ldr	r1, [r2, #24]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	6912      	ldr	r2, [r2, #16]
 8001a2a:	0212      	lsls	r2, r2, #8
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	619a      	str	r2, [r3, #24]
      break;
 8001a30:	e082      	b.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fa81 	bl	8001f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	69d2      	ldr	r2, [r2, #28]
 8001a48:	f042 0208 	orr.w	r2, r2, #8
 8001a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	69d2      	ldr	r2, [r2, #28]
 8001a58:	f022 0204 	bic.w	r2, r2, #4
 8001a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	69d1      	ldr	r1, [r2, #28]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	6912      	ldr	r2, [r2, #16]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	61da      	str	r2, [r3, #28]
      break;
 8001a70:	e062      	b.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fad7 	bl	800202c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	69d2      	ldr	r2, [r2, #28]
 8001a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	69d2      	ldr	r2, [r2, #28]
 8001a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	69d1      	ldr	r1, [r2, #28]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	6912      	ldr	r2, [r2, #16]
 8001aac:	0212      	lsls	r2, r2, #8
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	61da      	str	r2, [r3, #28]
      break;
 8001ab2:	e041      	b.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fb0e 	bl	80020dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001aca:	f042 0208 	orr.w	r2, r2, #8
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ada:	f022 0204 	bic.w	r2, r2, #4
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	6912      	ldr	r2, [r2, #16]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001af2:	e021      	b.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fb40 	bl	8002180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	6912      	ldr	r2, [r2, #16]
 8001b2e:	0212      	lsls	r2, r2, #8
 8001b30:	430a      	orrs	r2, r1
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b34:	e000      	b.n	8001b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8001b36:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop

08001b54 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d831      	bhi.n	8001bcc <HAL_TIM_ReadCapturedValue+0x78>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001ba5 	.word	0x08001ba5
 8001b74:	08001bcd 	.word	0x08001bcd
 8001b78:	08001bcd 	.word	0x08001bcd
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001baf 	.word	0x08001baf
 8001b84:	08001bcd 	.word	0x08001bcd
 8001b88:	08001bcd 	.word	0x08001bcd
 8001b8c:	08001bcd 	.word	0x08001bcd
 8001b90:	08001bb9 	.word	0x08001bb9
 8001b94:	08001bcd 	.word	0x08001bcd
 8001b98:	08001bcd 	.word	0x08001bcd
 8001b9c:	08001bcd 	.word	0x08001bcd
 8001ba0:	08001bc3 	.word	0x08001bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	60fb      	str	r3, [r7, #12]

      break;
 8001bac:	e00f      	b.n	8001bce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	60fb      	str	r3, [r7, #12]

      break;
 8001bb6:	e00a      	b.n	8001bce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	60fb      	str	r3, [r7, #12]

      break;
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	60fb      	str	r3, [r7, #12]

      break;
 8001bca:	e000      	b.n	8001bce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001bcc:	bf00      	nop
  }

  return tmpreg;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a40      	ldr	r2, [pc, #256]	; (8001d40 <TIM_Base_SetConfig+0x114>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <TIM_Base_SetConfig+0x40>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4a:	d00f      	beq.n	8001c6c <TIM_Base_SetConfig+0x40>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3d      	ldr	r2, [pc, #244]	; (8001d44 <TIM_Base_SetConfig+0x118>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00b      	beq.n	8001c6c <TIM_Base_SetConfig+0x40>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a3c      	ldr	r2, [pc, #240]	; (8001d48 <TIM_Base_SetConfig+0x11c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d007      	beq.n	8001c6c <TIM_Base_SetConfig+0x40>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <TIM_Base_SetConfig+0x120>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d003      	beq.n	8001c6c <TIM_Base_SetConfig+0x40>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3a      	ldr	r2, [pc, #232]	; (8001d50 <TIM_Base_SetConfig+0x124>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d108      	bne.n	8001c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <TIM_Base_SetConfig+0x114>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d02b      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8c:	d027      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <TIM_Base_SetConfig+0x118>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d023      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <TIM_Base_SetConfig+0x11c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <TIM_Base_SetConfig+0x120>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01b      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <TIM_Base_SetConfig+0x124>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d017      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <TIM_Base_SetConfig+0x128>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <TIM_Base_SetConfig+0x12c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00f      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <TIM_Base_SetConfig+0x130>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00b      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <TIM_Base_SetConfig+0x134>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <TIM_Base_SetConfig+0x138>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d003      	beq.n	8001cde <TIM_Base_SetConfig+0xb2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <TIM_Base_SetConfig+0x13c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d108      	bne.n	8001cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <TIM_Base_SetConfig+0x114>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <TIM_Base_SetConfig+0xf8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <TIM_Base_SetConfig+0x124>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d103      	bne.n	8001d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	615a      	str	r2, [r3, #20]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40000800 	.word	0x40000800
 8001d4c:	40000c00 	.word	0x40000c00
 8001d50:	40010400 	.word	0x40010400
 8001d54:	40014000 	.word	0x40014000
 8001d58:	40014400 	.word	0x40014400
 8001d5c:	40014800 	.word	0x40014800
 8001d60:	40001800 	.word	0x40001800
 8001d64:	40001c00 	.word	0x40001c00
 8001d68:	40002000 	.word	0x40002000

08001d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f023 0201 	bic.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <TIM_OC1_SetConfig+0xd8>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <TIM_OC1_SetConfig+0xdc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <TIM_OC1_SetConfig+0x64>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <TIM_OC1_SetConfig+0xe0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10c      	bne.n	8001dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f023 0308 	bic.w	r3, r3, #8
 8001dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <TIM_OC1_SetConfig+0xdc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d003      	beq.n	8001dfa <TIM_OC1_SetConfig+0x8e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <TIM_OC1_SetConfig+0xe0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d111      	bne.n	8001e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	621a      	str	r2, [r3, #32]
}
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	fffeff8f 	.word	0xfffeff8f
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40010400 	.word	0x40010400

08001e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	f023 0210 	bic.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <TIM_OC2_SetConfig+0xe4>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f023 0320 	bic.w	r3, r3, #32
 8001e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <TIM_OC2_SetConfig+0xe8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_OC2_SetConfig+0x68>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <TIM_OC2_SetConfig+0xec>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d10d      	bne.n	8001ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <TIM_OC2_SetConfig+0xe8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_OC2_SetConfig+0x94>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <TIM_OC2_SetConfig+0xec>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d113      	bne.n	8001f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	feff8fff 	.word	0xfeff8fff
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40010400 	.word	0x40010400

08001f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <TIM_OC3_SetConfig+0xe0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a22      	ldr	r2, [pc, #136]	; (8002024 <TIM_OC3_SetConfig+0xe4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_OC3_SetConfig+0x66>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <TIM_OC3_SetConfig+0xe8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d10d      	bne.n	8001fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <TIM_OC3_SetConfig+0xe4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_OC3_SetConfig+0x92>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <TIM_OC3_SetConfig+0xe8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d113      	bne.n	8001ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	621a      	str	r2, [r3, #32]
}
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	fffeff8f 	.word	0xfffeff8f
 8002024:	40010000 	.word	0x40010000
 8002028:	40010400 	.word	0x40010400

0800202c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <TIM_OC4_SetConfig+0xa4>)
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	031b      	lsls	r3, r3, #12
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <TIM_OC4_SetConfig+0xa8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <TIM_OC4_SetConfig+0x68>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <TIM_OC4_SetConfig+0xac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d109      	bne.n	80020a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800209a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	621a      	str	r2, [r3, #32]
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	feff8fff 	.word	0xfeff8fff
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010400 	.word	0x40010400

080020dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <TIM_OC5_SetConfig+0x98>)
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800211c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <TIM_OC5_SetConfig+0x9c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_OC5_SetConfig+0x5e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <TIM_OC5_SetConfig+0xa0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d109      	bne.n	800214e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	621a      	str	r2, [r3, #32]
}
 8002168:	bf00      	nop
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	fffeff8f 	.word	0xfffeff8f
 8002178:	40010000 	.word	0x40010000
 800217c:	40010400 	.word	0x40010400

08002180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <TIM_OC6_SetConfig+0x9c>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	051b      	lsls	r3, r3, #20
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a13      	ldr	r2, [pc, #76]	; (8002220 <TIM_OC6_SetConfig+0xa0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_OC6_SetConfig+0x60>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <TIM_OC6_SetConfig+0xa4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d109      	bne.n	80021f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	029b      	lsls	r3, r3, #10
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	feff8fff 	.word	0xfeff8fff
 8002220:	40010000 	.word	0x40010000
 8002224:	40010400 	.word	0x40010400

08002228 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f023 0201 	bic.w	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <TIM_TI1_SetConfig+0xcc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01b      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225c:	d017      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <TIM_TI1_SetConfig+0xd0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <TIM_TI1_SetConfig+0xd4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00f      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <TIM_TI1_SetConfig+0xd8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00b      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <TIM_TI1_SetConfig+0xdc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <TIM_TI1_SetConfig+0xe0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <TIM_TI1_SetConfig+0xe4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <TIM_TI1_SetConfig+0x6a>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <TIM_TI1_SetConfig+0x6c>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e003      	b.n	80022b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f023 030a 	bic.w	r3, r3, #10
 80022cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f003 030a 	and.w	r3, r3, #10
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	621a      	str	r2, [r3, #32]
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800
 8002300:	40000c00 	.word	0x40000c00
 8002304:	40010400 	.word	0x40010400
 8002308:	40014000 	.word	0x40014000
 800230c:	40001800 	.word	0x40001800

08002310 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f023 0210 	bic.w	r2, r3, #16
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800234e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	031b      	lsls	r3, r3, #12
 8002354:	b29b      	uxth	r3, r3
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002362:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	621a      	str	r2, [r3, #32]
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800238a:	b480      	push	{r7}
 800238c:	b087      	sub	sp, #28
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80023da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002440:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	031b      	lsls	r3, r3, #12
 8002446:	b29b      	uxth	r3, r3
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002454:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	031b      	lsls	r3, r3, #12
 800245a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	621a      	str	r2, [r3, #32]
}
 8002470:	bf00      	nop
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2201      	movs	r2, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024dc:	2302      	movs	r3, #2
 80024de:	e045      	b.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800251a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800253e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	4313      	orrs	r3, r2
 8002548:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40010000 	.word	0x40010000
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002598:	2302      	movs	r3, #2
 800259a:	e065      	b.n	8002668 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d115      	bne.n	8002656 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	051b      	lsls	r3, r3, #20
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40010000 	.word	0x40010000
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026bc:	f7fd ff44 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c0:	f000 f81e 	bl	8002700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026c4:	f000 f962 	bl	800298c <MX_GPIO_Init>
  MX_TIM1_Init();
 80026c8:	f000 f876 	bl	80027b8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80026cc:	f000 f8ce 	bl	800286c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1) != HAL_OK){
 80026d0:	2100      	movs	r1, #0
 80026d2:	4809      	ldr	r0, [pc, #36]	; (80026f8 <main+0x40>)
 80026d4:	f7fe fefc 	bl	80014d0 <HAL_TIM_IC_Start_IT>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <main+0x2a>
	  Error_Handler();
 80026de:	f000 fa7c 	bl	8002bda <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1)!= HAL_OK){
 80026e2:	2100      	movs	r1, #0
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <main+0x44>)
 80026e6:	f7fe fe83 	bl	80013f0 <HAL_TIM_PWM_Start>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <main+0x3c>
	  Error_Handler();
 80026f0:	f000 fa73 	bl	8002bda <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <main+0x3c>
 80026f6:	bf00      	nop
 80026f8:	20000080 	.word	0x20000080
 80026fc:	2000002c 	.word	0x2000002c

08002700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b094      	sub	sp, #80	; 0x50
 8002704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	2234      	movs	r2, #52	; 0x34
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fc00 	bl	8002f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <SystemClock_Config+0xb0>)
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <SystemClock_Config+0xb0>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <SystemClock_Config+0xb0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <SystemClock_Config+0xb4>)
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <SystemClock_Config+0xb4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <SystemClock_Config+0xb4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002758:	2302      	movs	r3, #2
 800275a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800275c:	2301      	movs	r3, #1
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 18;
 8002760:	2312      	movs	r3, #18
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fa03 	bl	8000b78 <HAL_RCC_OscConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002778:	f000 fa2f 	bl	8002bda <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277c:	230f      	movs	r3, #15
 800277e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fc60 	bl	800105c <HAL_RCC_ClockConfig>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80027a2:	f000 fa1a 	bl	8002bda <Error_Handler>
  }
}
 80027a6:	bf00      	nop
 80027a8:	3750      	adds	r7, #80	; 0x50
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000

080027b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027d6:	4b23      	ldr	r3, [pc, #140]	; (8002864 <MX_TIM1_Init+0xac>)
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <MX_TIM1_Init+0xb0>)
 80027da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80027dc:	4b21      	ldr	r3, [pc, #132]	; (8002864 <MX_TIM1_Init+0xac>)
 80027de:	2204      	movs	r2, #4
 80027e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <MX_TIM1_Init+0xac>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <MX_TIM1_Init+0xac>)
 80027ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <MX_TIM1_Init+0xac>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_TIM1_Init+0xac>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <MX_TIM1_Init+0xac>)
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002802:	4818      	ldr	r0, [pc, #96]	; (8002864 <MX_TIM1_Init+0xac>)
 8002804:	f7fe fe38 	bl	8001478 <HAL_TIM_IC_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800280e:	f000 f9e4 	bl	8002bda <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	480f      	ldr	r0, [pc, #60]	; (8002864 <MX_TIM1_Init+0xac>)
 8002826:	f7ff fe4f 	bl	80024c8 <HAL_TIMEx_MasterConfigSynchronization>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002830:	f000 f9d3 	bl	8002bda <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002834:	230a      	movs	r3, #10
 8002836:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002838:	2301      	movs	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2200      	movs	r2, #0
 8002848:	4619      	mov	r1, r3
 800284a:	4806      	ldr	r0, [pc, #24]	; (8002864 <MX_TIM1_Init+0xac>)
 800284c:	f7fe ffcd 	bl	80017ea <HAL_TIM_IC_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002856:	f000 f9c0 	bl	8002bda <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000080 	.word	0x20000080
 8002868:	40010000 	.word	0x40010000

0800286c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b096      	sub	sp, #88	; 0x58
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002872:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800287e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	615a      	str	r2, [r3, #20]
 8002890:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	222c      	movs	r2, #44	; 0x2c
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fb3b 	bl	8002f14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <MX_TIM8_Init+0x118>)
 80028a0:	4a39      	ldr	r2, [pc, #228]	; (8002988 <MX_TIM8_Init+0x11c>)
 80028a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4;
 80028a4:	4b37      	ldr	r3, [pc, #220]	; (8002984 <MX_TIM8_Init+0x118>)
 80028a6:	2204      	movs	r2, #4
 80028a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <MX_TIM8_Init+0x118>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <MX_TIM8_Init+0x118>)
 80028b2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80028b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <MX_TIM8_Init+0x118>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <MX_TIM8_Init+0x118>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <MX_TIM8_Init+0x118>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80028ca:	482e      	ldr	r0, [pc, #184]	; (8002984 <MX_TIM8_Init+0x118>)
 80028cc:	f7fe fd64 	bl	8001398 <HAL_TIM_PWM_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80028d6:	f000 f980 	bl	8002bda <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028ea:	4619      	mov	r1, r3
 80028ec:	4825      	ldr	r0, [pc, #148]	; (8002984 <MX_TIM8_Init+0x118>)
 80028ee:	f7ff fdeb 	bl	80024c8 <HAL_TIMEx_MasterConfigSynchronization>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80028f8:	f000 f96f 	bl	8002bda <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028fc:	2360      	movs	r3, #96	; 0x60
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 31999;
 8002900:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002906:	2300      	movs	r3, #0
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800290a:	2300      	movs	r3, #0
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800291e:	2200      	movs	r2, #0
 8002920:	4619      	mov	r1, r3
 8002922:	4818      	ldr	r0, [pc, #96]	; (8002984 <MX_TIM8_Init+0x118>)
 8002924:	f7fe fffe 	bl	8001924 <HAL_TIM_PWM_ConfigChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800292e:	f000 f954 	bl	8002bda <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800294a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4807      	ldr	r0, [pc, #28]	; (8002984 <MX_TIM8_Init+0x118>)
 8002968:	f7ff fe0a 	bl	8002580 <HAL_TIMEx_ConfigBreakDeadTime>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8002972:	f000 f932 	bl	8002bda <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002976:	4803      	ldr	r0, [pc, #12]	; (8002984 <MX_TIM8_Init+0x118>)
 8002978:	f000 f9ce 	bl	8002d18 <HAL_TIM_MspPostInit>

}
 800297c:	bf00      	nop
 800297e:	3758      	adds	r7, #88	; 0x58
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	2000002c 	.word	0x2000002c
 8002988:	40010400 	.word	0x40010400

0800298c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <MX_GPIO_Init+0x44>)
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_GPIO_Init+0x44>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_GPIO_Init+0x44>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <MX_GPIO_Init+0x44>)
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_GPIO_Init+0x44>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_GPIO_Init+0x44>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]

}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	00000000 	.word	0x00000000

080029d8 <linear_trasformation>:

/* USER CODE BEGIN 4 */

double linear_trasformation(double dc){
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	ed87 0b00 	vstr	d0, [r7]
	return 1.666667*dc - 0.0666667;
 80029e2:	ed97 7b00 	vldr	d7, [r7]
 80029e6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002a08 <linear_trasformation+0x30>
 80029ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029ee:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002a10 <linear_trasformation+0x38>
 80029f2:	ee37 7b46 	vsub.f64	d7, d7, d6
}
 80029f6:	eeb0 0b47 	vmov.f64	d0, d7
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	f3af 8000 	nop.w
 8002a08:	042528ae 	.word	0x042528ae
 8002a0c:	3ffaaaab 	.word	0x3ffaaaab
 8002a10:	a03b744a 	.word	0xa03b744a
 8002a14:	3fb11111 	.word	0x3fb11111

08002a18 <calc_dc>:

double calc_dc(uint16_t t1,uint16_t t2,uint16_t t3){
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
 8002a22:	460b      	mov	r3, r1
 8002a24:	80bb      	strh	r3, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	807b      	strh	r3, [r7, #2]
	uint16_t second_cycle,first_cycle;
    if(t3 < t2){
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	88bb      	ldrh	r3, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d206      	bcs.n	8002a40 <calc_dc+0x28>
    	second_cycle = (0xFFFF - t2) + t3;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	88bb      	ldrh	r3, [r7, #4]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	82fb      	strh	r3, [r7, #22]
 8002a3e:	e003      	b.n	8002a48 <calc_dc+0x30>
    }else{
    	second_cycle = t3 - t2;
 8002a40:	887a      	ldrh	r2, [r7, #2]
 8002a42:	88bb      	ldrh	r3, [r7, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	82fb      	strh	r3, [r7, #22]
    }
    if(t2 < t1){
 8002a48:	88ba      	ldrh	r2, [r7, #4]
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d206      	bcs.n	8002a5e <calc_dc+0x46>
    	first_cycle = (0xFFFF - t1) + t2;
 8002a50:	88ba      	ldrh	r2, [r7, #4]
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	82bb      	strh	r3, [r7, #20]
 8002a5c:	e003      	b.n	8002a66 <calc_dc+0x4e>
    }else{
    	first_cycle = t2 - t1;
 8002a5e:	88ba      	ldrh	r2, [r7, #4]
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	82bb      	strh	r3, [r7, #20]
    }
    //double freq = FREQ_COUNT/(double)(first_cycle+second_cycle);
    double dc =  ((double)first_cycle)/((double)(first_cycle+second_cycle));
 8002a66:	8abb      	ldrh	r3, [r7, #20]
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002a70:	8aba      	ldrh	r2, [r7, #20]
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	4413      	add	r3, r2
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002a7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a82:	ed87 7b02 	vstr	d7, [r7, #8]
    if(dc > 0.5){
 8002a86:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002a8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	dd07      	ble.n	8002aa8 <calc_dc+0x90>
    	dc =  1 - dc;
 8002a98:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002a9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002aa0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002aa4:	ed87 7b02 	vstr	d7, [r7, #8]
    }
    dc = linear_trasformation(dc);
 8002aa8:	ed97 0b02 	vldr	d0, [r7, #8]
 8002aac:	f7ff ff94 	bl	80029d8 <linear_trasformation>
 8002ab0:	ed87 0b02 	vstr	d0, [r7, #8]
    return dc;
 8002ab4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002ab8:	ec44 3b17 	vmov	d7, r3, r4
}
 8002abc:	eeb0 0b47 	vmov.f64	d0, d7
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}
	...

08002ac8 <follow_pwm>:

void follow_pwm(TIM_HandleTypeDef *htim,size_t channel){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	ed2d 8b02 	vpush	{d8}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
	switch(state[channel]){
 8002ad6:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <follow_pwm+0xe0>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d014      	beq.n	8002b0e <follow_pwm+0x46>
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d022      	beq.n	8002b2e <follow_pwm+0x66>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d000      	beq.n	8002aee <follow_pwm+0x26>
			    __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,cycle_to_write);
			    state[channel] = 0;
			    break;
		  }

}
 8002aec:	e056      	b.n	8002b9c <follow_pwm+0xd4>
			    uwIC2Value[channel] = HAL_TIM_ReadCapturedValue(htim, channel);
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff f82f 	bl	8001b54 <HAL_TIM_ReadCapturedValue>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b299      	uxth	r1, r3
 8002afa:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <follow_pwm+0xe4>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			    state[channel] = 1;
 8002b02:	4a29      	ldr	r2, [pc, #164]	; (8002ba8 <follow_pwm+0xe0>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4413      	add	r3, r2
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
			    break;
 8002b0c:	e046      	b.n	8002b9c <follow_pwm+0xd4>
			    uwIC2Value2[channel] = HAL_TIM_ReadCapturedValue(htim, channel);
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff f81f 	bl	8001b54 <HAL_TIM_ReadCapturedValue>
 8002b16:	4603      	mov	r3, r0
 8002b18:	b299      	uxth	r1, r3
 8002b1a:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <follow_pwm+0xe8>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			    state[channel] = 2;
 8002b22:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <follow_pwm+0xe0>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4413      	add	r3, r2
 8002b28:	2202      	movs	r2, #2
 8002b2a:	701a      	strb	r2, [r3, #0]
			    break;
 8002b2c:	e036      	b.n	8002b9c <follow_pwm+0xd4>
			    uwIC2Value3[channel] = HAL_TIM_ReadCapturedValue(htim, channel);
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff f80f 	bl	8001b54 <HAL_TIM_ReadCapturedValue>
 8002b36:	4603      	mov	r3, r0
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <follow_pwm+0xec>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			    uint16_t cycle_to_write = (uint16_t)htim8.Init.Period*calc_dc(uwIC2Value[channel],uwIC2Value2[channel],uwIC2Value3[channel]);
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <follow_pwm+0xf0>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b50:	4a16      	ldr	r2, [pc, #88]	; (8002bac <follow_pwm+0xe4>)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b58:	b298      	uxth	r0, r3
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <follow_pwm+0xe8>)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b62:	b299      	uxth	r1, r3
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <follow_pwm+0xec>)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f7ff ff52 	bl	8002a18 <calc_dc>
 8002b74:	eeb0 7b40 	vmov.f64	d7, d0
 8002b78:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b80:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	82fb      	strh	r3, [r7, #22]
			    __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,cycle_to_write);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <follow_pwm+0xf0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	8afa      	ldrh	r2, [r7, #22]
 8002b8e:	635a      	str	r2, [r3, #52]	; 0x34
			    state[channel] = 0;
 8002b90:	4a05      	ldr	r2, [pc, #20]	; (8002ba8 <follow_pwm+0xe0>)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4413      	add	r3, r2
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
			    break;
 8002b9a:	bf00      	nop
}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	ecbd 8b02 	vpop	{d8}
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000078 	.word	0x20000078
 8002bac:	2000006c 	.word	0x2000006c
 8002bb0:	200000cc 	.word	0x200000cc
 8002bb4:	200000c0 	.word	0x200000c0
 8002bb8:	2000002c 	.word	0x2000002c

08002bbc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  follow_pwm(htim,htim->Channel-1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7f1b      	ldrb	r3, [r3, #28]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff7b 	bl	8002ac8 <follow_pwm>
  /*if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
	  uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
  }*/
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_MspInit+0x44>)
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_MspInit+0x44>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_MspInit+0x44>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_MspInit+0x44>)
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_MspInit+0x44>)
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_MspInit+0x44>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_TIM_IC_MspInit+0x9c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d138      	bne.n	8002cc4 <HAL_TIM_IC_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c52:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_TIM_IC_MspInit+0xa0>)
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_TIM_IC_MspInit+0xa0>)
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_TIM_IC_MspInit+0xa0>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_TIM_IC_MspInit+0xa0>)
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_TIM_IC_MspInit+0xa0>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f043 0310 	orr.w	r3, r3, #16
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_TIM_IC_MspInit+0xa0>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <HAL_TIM_IC_MspInit+0xa4>)
 8002ca0:	f7fd fdc0 	bl	8000824 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2019      	movs	r0, #25
 8002caa:	f7fd fd84 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cae:	2019      	movs	r0, #25
 8002cb0:	f7fd fd9d 	bl	80007ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	201b      	movs	r0, #27
 8002cba:	f7fd fd7c 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002cbe:	201b      	movs	r0, #27
 8002cc0:	f7fd fd95 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002cc4:	bf00      	nop
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_TIM_PWM_MspInit+0x38>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10b      	bne.n	8002d02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40010400 	.word	0x40010400
 8002d14:	40023800 	.word	0x40023800

08002d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_TIM_MspPostInit+0x64>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d11b      	bne.n	8002d72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <HAL_TIM_MspPostInit+0x68>)
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_TIM_MspPostInit+0x68>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_TIM_MspPostInit+0x68>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d62:	2303      	movs	r3, #3
 8002d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <HAL_TIM_MspPostInit+0x6c>)
 8002d6e:	f7fd fd59 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002d72:	bf00      	nop
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40010400 	.word	0x40010400
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020800 	.word	0x40020800

08002d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d9a:	e7fe      	b.n	8002d9a <HardFault_Handler+0x4>

08002d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <MemManage_Handler+0x4>

08002da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <BusFault_Handler+0x4>

08002da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <UsageFault_Handler+0x4>

08002dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ddc:	f7fd fbf2 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002dea:	f7fe fbdf 	bl	80015ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000080 	.word	0x20000080

08002df8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <TIM1_CC_IRQHandler+0x10>)
 8002dfe:	f7fe fbd5 	bl	80015ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000080 	.word	0x20000080

08002e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e10:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <SystemInit+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <SystemInit+0x5c>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <SystemInit+0x60>)
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <SystemInit+0x60>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <SystemInit+0x60>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e32:	490e      	ldr	r1, [pc, #56]	; (8002e6c <SystemInit+0x60>)
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <SystemInit+0x60>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <SystemInit+0x64>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <SystemInit+0x60>)
 8002e40:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <SystemInit+0x68>)
 8002e42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e44:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <SystemInit+0x60>)
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <SystemInit+0x60>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <SystemInit+0x60>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e56:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <SystemInit+0x5c>)
 8002e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e5c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	fef6ffff 	.word	0xfef6ffff
 8002e74:	24003010 	.word	0x24003010

08002e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e7e:	e003      	b.n	8002e88 <LoopCopyDataInit>

08002e80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e86:	3104      	adds	r1, #4

08002e88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e90:	d3f6      	bcc.n	8002e80 <CopyDataInit>
  ldr  r2, =_sbss
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e94:	e002      	b.n	8002e9c <LoopFillZerobss>

08002e96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e98:	f842 3b04 	str.w	r3, [r2], #4

08002e9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ea0:	d3f9      	bcc.n	8002e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ea2:	f7ff ffb3 	bl	8002e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ea6:	f000 f811 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eaa:	f7ff fc05 	bl	80026b8 <main>
  bx  lr    
 8002eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002eb0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002eb4:	08002f5c 	.word	0x08002f5c
  ldr  r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ebc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002ec0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002ec4:	200000d8 	.word	0x200000d8

08002ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC_IRQHandler>
	...

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4e0d      	ldr	r6, [pc, #52]	; (8002f04 <__libc_init_array+0x38>)
 8002ed0:	4c0d      	ldr	r4, [pc, #52]	; (8002f08 <__libc_init_array+0x3c>)
 8002ed2:	1ba4      	subs	r4, r4, r6
 8002ed4:	10a4      	asrs	r4, r4, #2
 8002ed6:	2500      	movs	r5, #0
 8002ed8:	42a5      	cmp	r5, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	4e0b      	ldr	r6, [pc, #44]	; (8002f0c <__libc_init_array+0x40>)
 8002ede:	4c0c      	ldr	r4, [pc, #48]	; (8002f10 <__libc_init_array+0x44>)
 8002ee0:	f000 f820 	bl	8002f24 <_init>
 8002ee4:	1ba4      	subs	r4, r4, r6
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	2500      	movs	r5, #0
 8002eea:	42a5      	cmp	r5, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef4:	4798      	blx	r3
 8002ef6:	3501      	adds	r5, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002efe:	4798      	blx	r3
 8002f00:	3501      	adds	r5, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08002f54 	.word	0x08002f54
 8002f08:	08002f54 	.word	0x08002f54
 8002f0c:	08002f54 	.word	0x08002f54
 8002f10:	08002f58 	.word	0x08002f58

08002f14 <memset>:
 8002f14:	4402      	add	r2, r0
 8002f16:	4603      	mov	r3, r0
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <memset+0xa>
 8002f1c:	4770      	bx	lr
 8002f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f22:	e7f9      	b.n	8002f18 <memset+0x4>

08002f24 <_init>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr

08002f30 <_fini>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr
